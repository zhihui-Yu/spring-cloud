SpringCloud-config: spring家族下对微服务的配置进行管理的一个框架，可以修改配置中心从而让各个服务也相应变化。

1. 需要github上配置一个repo来管理配置文件。修改repo中的配置文件，从而自动将同步到其他服务的配置文件。

2. 在配置中心的服务中添加如下配置
  2.0 pom中添加
    ```pom
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
    ```
  2.1 yml中添加
        ```yml
        spring:
          application:
            name: cloud-config-center
          cloud:
            config:
              server:
                git:
                  uri: git@github.com:zhihui-Yu/springcloud-config.git # git仓库地址
                  default-label: main # 读取的分支
                  search-paths: # 搜索目录
                    - springcloud-config
        ```
  2.2 启动类中添加 @EnableConfigServer

到此可以实现同步配置中心和repo的配置文件。
url:
     http://localhost:5544/{分支/label}/{application}-{profile}.yml
     http://localhost:5544/main/config-dev.yml


客户端配置:
1.
    pom:
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

2. yml -> bootstrap.yml (系统级别的配置文件)
 ```yml
     # 优先级比application高，是系统的一个配置
     server:
       port: 5533

     spring:
       application:
         name: cloud-config-client
       cloud:
         config:
           label: main # 分支名称
           name: config #配置文件名称
           profile: dev # 读取的后缀名称
           uri: http://localhost:5544 # 配置中心地址
     eureka:
       client:
         service-url:
           defaultZone: http://localhost:7001/eureka

     # 暴露监控端点 -> 为同步repo中的配置(第一步)
     management:
       endpoints:
         web:
           exposure:
             include: "*"
 ```

3. 在主启动类中添加 @EnableEurekaClient

4. 在Controller中添加 @RefreshScope -> 为同步repo中的配置(第二步)

5. 使用 @Value("${xxx.xxx}") 来获取远程配置文件中的数据

>  注意：默认是不会随着repo中的数据改变而改变，需要为同步repo中的配置做配置(上述第一步+第二步)，然后再手动去发送一个更新的post请求才可以。
   发送的请求： curl -X POST "http:localhost:5533/actuator/refresh"

config暂时没有 repo更新 client也随着更新的自动化操作，需要自己去发一个请求。

有好: 可以自己定义哪些不用更新，通过脚本来批量更新。
有坏: 不够自动化。